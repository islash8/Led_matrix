
LEDMAT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000b06  00000b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e30  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ea9  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000388d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00003dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00004265  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00004282  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 38 05 	call	0xa70	; 0xa70 <main>
  7a:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vInit>:
/* Inputs:  -> void																	*/
/* Outputs: -> void                                                      			*/
/************************************************************************************/

void DIO_vInit (void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRA = CONC_8BIT(DIO_u8_PIN0_INIT_DIR,  DIO_u8_PIN1_INIT_DIR,
  8a:	8a e3       	ldi	r24, 0x3A	; 58
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTA = CONC_8BIT(DIO_u8_PIN0_INIT_PORT_VAL,  DIO_u8_PIN1_INIT_PORT_VAL,
  94:	8b e3       	ldi	r24, 0x3B	; 59
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	fc 01       	movw	r30, r24
  9a:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINA = CONC_8BIT(DIO_u8_PIN0_INIT_PIN_VAL,  DIO_u8_PIN1_INIT_PIN_VAL,
  9c:	89 e3       	ldi	r24, 0x39	; 57
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/


	DIO_Register_DDRB = CONC_8BIT(DIO_u8_PIN8_INIT_DIR ,  DIO_u8_PIN9_INIT_DIR,
  a4:	87 e3       	ldi	r24, 0x37	; 55
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTB = CONC_8BIT(DIO_u8_PIN8_INIT_PORT_VAL ,  DIO_u8_PIN9_INIT_PORT_VAL,
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	10 82       	st	Z, r1

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PINB = CONC_8BIT(DIO_u8_PIN8_INIT_PIN_VAL ,  DIO_u8_PIN9_INIT_PIN_VAL,
  b6:	86 e3       	ldi	r24, 0x36	; 54
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
/* -------------------------------> Port C <----------------------------------------*/
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_DDRC = CONC_8BIT(DIO_u8_PIN16_INIT_DIR,  DIO_u8_PIN17_INIT_DIR,
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_DIR,  DIO_u8_PIN19_INIT_DIR,
								  DIO_u8_PIN20_INIT_DIR,  DIO_u8_PIN21_INIT_DIR,
								  DIO_u8_PIN22_INIT_DIR,  DIO_u8_PIN23_INIT_DIR);

	DIO_Register_PORTC = CONC_8BIT(DIO_u8_PIN16_INIT_PORT_VAL,  DIO_u8_PIN17_INIT_PORT_VAL,
  c6:	85 e3       	ldi	r24, 0x35	; 53
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
								  DIO_u8_PIN18_INIT_PORT_VAL,  DIO_u8_PIN19_INIT_PORT_VAL,
								  DIO_u8_PIN20_INIT_PORT_VAL,  DIO_u8_PIN21_INIT_PORT_VAL,
								  DIO_u8_PIN22_INIT_PORT_VAL,  DIO_u8_PIN23_INIT_PORT_VAL);

	DIO_Register_PINC = CONC_8BIT(DIO_u8_PIN16_INIT_PIN_VAL,  DIO_u8_PIN17_INIT_PIN_VAL,
  ce:	83 e3       	ldi	r24, 0x33	; 51
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1
/************************************************************************************/
/* ---------------------------> Direction configuration <---------------------------*/
/************************************************************************************/

/* -------------------------------> Port D <----------------------------------------*/
	DIO_Register_DDRD = CONC_8BIT(DIO_u8_PIN24_INIT_DIR,  DIO_u8_PIN25_INIT_DIR,
  d6:	81 e3       	ldi	r24, 0x31	; 49
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PORT configuration <---------------------------*/
/************************************************************************************/

	DIO_Register_PORTD = CONC_8BIT(DIO_u8_PIN24_INIT_PORT_VAL,  DIO_u8_PIN25_INIT_PORT_VAL,
  e0:	82 e3       	ldi	r24, 0x32	; 50
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2f e7       	ldi	r18, 0x7F	; 127
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18

/************************************************************************************/
/* --------------------------------> PIN configuration <----------------------------*/
/************************************************************************************/

	DIO_Register_PIND = CONC_8BIT(DIO_u8_PIN24_INIT_PIN_VAL,  DIO_u8_PIN25_INIT_PIN_VAL,
  ea:	80 e3       	ldi	r24, 0x30	; 48
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	10 82       	st	Z, r1
        #define DIO_PIN31_INIT_VALUE   DIO_PIN_INIT_VAL_LOW
      #endif

/************************************************************************************/

}
  f2:	00 00       	nop
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <DIO_u8SetPinDirection>:
/*          -> Direction (copy_u8Direction) (either 0 for input or 1 for output)	*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinDirection(u8 copy_u8PinNB, u8 copy_u8Direction)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <DIO_u8SetPinDirection+0x6>
 100:	0f 92       	push	r0
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	8a 83       	std	Y+2, r24	; 0x02
 108:	6b 83       	std	Y+3, r22	; 0x03
/*===========================>> Local variables <<==================================*/

	u8 local_u8Error  = STD_ERROR_OK; /* ----> This is used as a return value       */
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	89 83       	std	Y+1, r24	; 0x01


	/* validates the input if it's more than maximum number of pins					*/

	if(copy_u8PinNB < DIO_MAXPINNB)
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	80 32       	cpi	r24, 0x20	; 32
 112:	08 f0       	brcs	.+2      	; 0x116 <DIO_u8SetPinDirection+0x1c>
 114:	da c0       	rjmp	.+436    	; 0x2ca <DIO_u8SetPinDirection+0x1d0>
	{
		switch (copy_u8Direction)
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	21 f0       	breq	.+8      	; 0x128 <DIO_u8SetPinDirection+0x2e>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	09 f4       	brne	.+2      	; 0x126 <DIO_u8SetPinDirection+0x2c>
 124:	6d c0       	rjmp	.+218    	; 0x200 <DIO_u8SetPinDirection+0x106>
 126:	ce c0       	rjmp	.+412    	; 0x2c4 <DIO_u8SetPinDirection+0x1ca>
		{
			case DIO_PIN_INPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	a8 f4       	brcc	.+42     	; 0x158 <DIO_u8SetPinDirection+0x5e>
				{
					DIO_Register_DDRA = RESET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 12e:	8a e3       	ldi	r24, 0x3A	; 58
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	28 2f       	mov	r18, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	87 70       	andi	r24, 0x07	; 7
 140:	99 27       	eor	r25, r25
 142:	86 57       	subi	r24, 0x76	; 118
 144:	9f 4f       	sbci	r25, 0xFF	; 255
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	80 95       	com	r24
 14c:	28 23       	and	r18, r24
 14e:	8a e3       	ldi	r24, 0x3A	; 58
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 156:	bb c0       	rjmp	.+374    	; 0x2ce <DIO_u8SetPinDirection+0x1d4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	c0 f0       	brcs	.+48     	; 0x18e <DIO_u8SetPinDirection+0x94>
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	a8 f4       	brcc	.+42     	; 0x18e <DIO_u8SetPinDirection+0x94>
					DIO_Register_DDRB = RESET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 164:	87 e3       	ldi	r24, 0x37	; 55
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	28 2f       	mov	r18, r24
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	87 70       	andi	r24, 0x07	; 7
 176:	99 27       	eor	r25, r25
 178:	86 57       	subi	r24, 0x76	; 118
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	80 95       	com	r24
 182:	28 23       	and	r18, r24
 184:	87 e3       	ldi	r24, 0x37	; 55
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	38 c0       	rjmp	.+112    	; 0x1fe <DIO_u8SetPinDirection+0x104>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	80 31       	cpi	r24, 0x10	; 16
 192:	c0 f0       	brcs	.+48     	; 0x1c4 <DIO_u8SetPinDirection+0xca>
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	88 31       	cpi	r24, 0x18	; 24
 198:	a8 f4       	brcc	.+42     	; 0x1c4 <DIO_u8SetPinDirection+0xca>
					DIO_Register_DDRC = RESET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 19a:	84 e3       	ldi	r24, 0x34	; 52
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	28 2f       	mov	r18, r24
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	87 70       	andi	r24, 0x07	; 7
 1ac:	99 27       	eor	r25, r25
 1ae:	86 57       	subi	r24, 0x76	; 118
 1b0:	9f 4f       	sbci	r25, 0xFF	; 255
 1b2:	fc 01       	movw	r30, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	80 95       	com	r24
 1b8:	28 23       	and	r18, r24
 1ba:	84 e3       	ldi	r24, 0x34	; 52
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
 1c2:	1d c0       	rjmp	.+58     	; 0x1fe <DIO_u8SetPinDirection+0x104>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	88 31       	cpi	r24, 0x18	; 24
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <DIO_u8SetPinDirection+0xd2>
 1ca:	81 c0       	rjmp	.+258    	; 0x2ce <DIO_u8SetPinDirection+0x1d4>
 1cc:	8a 81       	ldd	r24, Y+2	; 0x02
 1ce:	80 32       	cpi	r24, 0x20	; 32
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <DIO_u8SetPinDirection+0xda>
 1d2:	7d c0       	rjmp	.+250    	; 0x2ce <DIO_u8SetPinDirection+0x1d4>
					DIO_Register_DDRD = RESET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 1d4:	81 e3       	ldi	r24, 0x31	; 49
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	28 2f       	mov	r18, r24
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	87 70       	andi	r24, 0x07	; 7
 1e6:	99 27       	eor	r25, r25
 1e8:	86 57       	subi	r24, 0x76	; 118
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	80 95       	com	r24
 1f2:	28 23       	and	r18, r24
 1f4:	81 e3       	ldi	r24, 0x31	; 49
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
				break;
 1fc:	68 c0       	rjmp	.+208    	; 0x2ce <DIO_u8SetPinDirection+0x1d4>
 1fe:	67 c0       	rjmp	.+206    	; 0x2ce <DIO_u8SetPinDirection+0x1d4>

			case DIO_PIN_OUTPUT:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	88 30       	cpi	r24, 0x08	; 8
 204:	98 f4       	brcc	.+38     	; 0x22c <DIO_u8SetPinDirection+0x132>
				{
					DIO_Register_DDRA = SET_BIT(DIO_Register_DDRA, copy_u8PinNB);
 206:	8a e3       	ldi	r24, 0x3A	; 58
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	30 81       	ld	r19, Z
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	87 70       	andi	r24, 0x07	; 7
 216:	99 27       	eor	r25, r25
 218:	86 57       	subi	r24, 0x76	; 118
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	fc 01       	movw	r30, r24
 21e:	20 81       	ld	r18, Z
 220:	8a e3       	ldi	r24, 0x3A	; 58
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	23 2b       	or	r18, r19
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
				}
				break;
 22a:	53 c0       	rjmp	.+166    	; 0x2d2 <DIO_u8SetPinDirection+0x1d8>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	b0 f0       	brcs	.+44     	; 0x25e <DIO_u8SetPinDirection+0x164>
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	80 31       	cpi	r24, 0x10	; 16
 236:	98 f4       	brcc	.+38     	; 0x25e <DIO_u8SetPinDirection+0x164>
					DIO_Register_DDRB = SET_BIT(DIO_Register_DDRB, copy_u8PinNB);
 238:	87 e3       	ldi	r24, 0x37	; 55
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	30 81       	ld	r19, Z
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	87 70       	andi	r24, 0x07	; 7
 248:	99 27       	eor	r25, r25
 24a:	86 57       	subi	r24, 0x76	; 118
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	fc 01       	movw	r30, r24
 250:	20 81       	ld	r18, Z
 252:	87 e3       	ldi	r24, 0x37	; 55
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	23 2b       	or	r18, r19
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
 25c:	32 c0       	rjmp	.+100    	; 0x2c2 <DIO_u8SetPinDirection+0x1c8>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	b0 f0       	brcs	.+44     	; 0x290 <DIO_u8SetPinDirection+0x196>
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	88 31       	cpi	r24, 0x18	; 24
 268:	98 f4       	brcc	.+38     	; 0x290 <DIO_u8SetPinDirection+0x196>
					DIO_Register_DDRC = SET_BIT(DIO_Register_DDRC, copy_u8PinNB);
 26a:	84 e3       	ldi	r24, 0x34	; 52
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	30 81       	ld	r19, Z
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	87 70       	andi	r24, 0x07	; 7
 27a:	99 27       	eor	r25, r25
 27c:	86 57       	subi	r24, 0x76	; 118
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	fc 01       	movw	r30, r24
 282:	20 81       	ld	r18, Z
 284:	84 e3       	ldi	r24, 0x34	; 52
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	23 2b       	or	r18, r19
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	19 c0       	rjmp	.+50     	; 0x2c2 <DIO_u8SetPinDirection+0x1c8>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	88 31       	cpi	r24, 0x18	; 24
 294:	f0 f0       	brcs	.+60     	; 0x2d2 <DIO_u8SetPinDirection+0x1d8>
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	80 32       	cpi	r24, 0x20	; 32
 29a:	d8 f4       	brcc	.+54     	; 0x2d2 <DIO_u8SetPinDirection+0x1d8>
					DIO_Register_DDRD = SET_BIT(DIO_Register_DDRD, copy_u8PinNB);
 29c:	81 e3       	ldi	r24, 0x31	; 49
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	30 81       	ld	r19, Z
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	87 70       	andi	r24, 0x07	; 7
 2ac:	99 27       	eor	r25, r25
 2ae:	86 57       	subi	r24, 0x76	; 118
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 81       	ld	r18, Z
 2b6:	81 e3       	ldi	r24, 0x31	; 49
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	23 2b       	or	r18, r19
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
				break;
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <DIO_u8SetPinDirection+0x1d8>
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <DIO_u8SetPinDirection+0x1d8>

			default:
				local_u8Error = STD_ERROR_NOK;
 2c4:	19 82       	std	Y+1, r1	; 0x01
				break;
 2c6:	00 00       	nop
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <DIO_u8SetPinDirection+0x1da>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 2ca:	19 82       	std	Y+1, r1	; 0x01
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <DIO_u8SetPinDirection+0x1da>
				break;
 2ce:	00 00       	nop
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <DIO_u8SetPinDirection+0x1da>
				break;
 2d2:	00 00       	nop
	}

	return local_u8Error;
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <DIO_u8SetPinValue>:
/*          -> Value (copy_u8Value) (either 0 or 1)	                                */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPinValue(u8 copy_u8PinNB, u8 copy_u8Value)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	00 d0       	rcall	.+0      	; 0x2e8 <DIO_u8SetPinValue+0x6>
 2e8:	0f 92       	push	r0
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	8a 83       	std	Y+2, r24	; 0x02
 2f0:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	89 83       	std	Y+1, r24	; 0x01

	/* Validates the input to check whether the user enter the
	 * correct pin number, and whether he enters the right which
	 * is not bigger than upper limit.
	 */
	if(copy_u8PinNB < DIO_MAXPINNB)
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	80 32       	cpi	r24, 0x20	; 32
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <DIO_u8SetPinValue+0x1c>
 2fc:	d9 c0       	rjmp	.+434    	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
	{
		switch(copy_u8Value)
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	21 f0       	breq	.+8      	; 0x310 <DIO_u8SetPinValue+0x2e>
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	09 f4       	brne	.+2      	; 0x30e <DIO_u8SetPinValue+0x2c>
 30c:	6d c0       	rjmp	.+218    	; 0x3e8 <DIO_u8SetPinValue+0x106>
 30e:	ce c0       	rjmp	.+412    	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
		{
			case DIO_PIN_LOW:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	88 30       	cpi	r24, 0x08	; 8
 314:	a8 f4       	brcc	.+42     	; 0x340 <DIO_u8SetPinValue+0x5e>
				{
					DIO_Register_PORTA = RESET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 316:	8b e3       	ldi	r24, 0x3B	; 59
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	80 81       	ld	r24, Z
 31e:	28 2f       	mov	r18, r24
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	87 70       	andi	r24, 0x07	; 7
 328:	99 27       	eor	r25, r25
 32a:	86 57       	subi	r24, 0x76	; 118
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	fc 01       	movw	r30, r24
 330:	80 81       	ld	r24, Z
 332:	80 95       	com	r24
 334:	28 23       	and	r18, r24
 336:	8b e3       	ldi	r24, 0x3B	; 59
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 33e:	ba c0       	rjmp	.+372    	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	88 30       	cpi	r24, 0x08	; 8
 344:	c0 f0       	brcs	.+48     	; 0x376 <DIO_u8SetPinValue+0x94>
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	80 31       	cpi	r24, 0x10	; 16
 34a:	a8 f4       	brcc	.+42     	; 0x376 <DIO_u8SetPinValue+0x94>
					DIO_Register_PORTB = RESET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 34c:	88 e3       	ldi	r24, 0x38	; 56
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	fc 01       	movw	r30, r24
 352:	80 81       	ld	r24, Z
 354:	28 2f       	mov	r18, r24
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	87 70       	andi	r24, 0x07	; 7
 35e:	99 27       	eor	r25, r25
 360:	86 57       	subi	r24, 0x76	; 118
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	fc 01       	movw	r30, r24
 366:	80 81       	ld	r24, Z
 368:	80 95       	com	r24
 36a:	28 23       	and	r18, r24
 36c:	88 e3       	ldi	r24, 0x38	; 56
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
 374:	38 c0       	rjmp	.+112    	; 0x3e6 <DIO_u8SetPinValue+0x104>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	80 31       	cpi	r24, 0x10	; 16
 37a:	c0 f0       	brcs	.+48     	; 0x3ac <DIO_u8SetPinValue+0xca>
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	88 31       	cpi	r24, 0x18	; 24
 380:	a8 f4       	brcc	.+42     	; 0x3ac <DIO_u8SetPinValue+0xca>
					DIO_Register_PORTC = RESET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 382:	85 e3       	ldi	r24, 0x35	; 53
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	28 2f       	mov	r18, r24
 38c:	8a 81       	ldd	r24, Y+2	; 0x02
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	87 70       	andi	r24, 0x07	; 7
 394:	99 27       	eor	r25, r25
 396:	86 57       	subi	r24, 0x76	; 118
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	80 95       	com	r24
 3a0:	28 23       	and	r18, r24
 3a2:	85 e3       	ldi	r24, 0x35	; 53
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	1d c0       	rjmp	.+58     	; 0x3e6 <DIO_u8SetPinValue+0x104>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	88 31       	cpi	r24, 0x18	; 24
 3b0:	08 f4       	brcc	.+2      	; 0x3b4 <DIO_u8SetPinValue+0xd2>
 3b2:	80 c0       	rjmp	.+256    	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	80 32       	cpi	r24, 0x20	; 32
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <DIO_u8SetPinValue+0xda>
 3ba:	7c c0       	rjmp	.+248    	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
					DIO_Register_PORTD = RESET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 3bc:	82 e3       	ldi	r24, 0x32	; 50
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	80 81       	ld	r24, Z
 3c4:	28 2f       	mov	r18, r24
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	88 2f       	mov	r24, r24
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	87 70       	andi	r24, 0x07	; 7
 3ce:	99 27       	eor	r25, r25
 3d0:	86 57       	subi	r24, 0x76	; 118
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	80 95       	com	r24
 3da:	28 23       	and	r18, r24
 3dc:	82 e3       	ldi	r24, 0x32	; 50
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
				break;
 3e4:	67 c0       	rjmp	.+206    	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
 3e6:	66 c0       	rjmp	.+204    	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>

			case DIO_PIN_HIGH:
				if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	98 f4       	brcc	.+38     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
				{
					DIO_Register_PORTA = SET_BIT(DIO_Register_PORTA, copy_u8PinNB);
 3ee:	8b e3       	ldi	r24, 0x3B	; 59
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	fc 01       	movw	r30, r24
 3f4:	30 81       	ld	r19, Z
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	87 70       	andi	r24, 0x07	; 7
 3fe:	99 27       	eor	r25, r25
 400:	86 57       	subi	r24, 0x76	; 118
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	fc 01       	movw	r30, r24
 406:	20 81       	ld	r18, Z
 408:	8b e3       	ldi	r24, 0x3B	; 59
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	23 2b       	or	r18, r19
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
				}
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
				{
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
				}
				break;
 412:	52 c0       	rjmp	.+164    	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
				else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	88 30       	cpi	r24, 0x08	; 8
 418:	b0 f0       	brcs	.+44     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	80 31       	cpi	r24, 0x10	; 16
 41e:	98 f4       	brcc	.+38     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
					DIO_Register_PORTB = SET_BIT(DIO_Register_PORTB, copy_u8PinNB);
 420:	88 e3       	ldi	r24, 0x38	; 56
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	30 81       	ld	r19, Z
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	87 70       	andi	r24, 0x07	; 7
 430:	99 27       	eor	r25, r25
 432:	86 57       	subi	r24, 0x76	; 118
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	fc 01       	movw	r30, r24
 438:	20 81       	ld	r18, Z
 43a:	88 e3       	ldi	r24, 0x38	; 56
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	23 2b       	or	r18, r19
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
 444:	32 c0       	rjmp	.+100    	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
				else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	80 31       	cpi	r24, 0x10	; 16
 44a:	b0 f0       	brcs	.+44     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	88 31       	cpi	r24, 0x18	; 24
 450:	98 f4       	brcc	.+38     	; 0x478 <__FUSE_REGION_LENGTH__+0x78>
					DIO_Register_PORTC = SET_BIT(DIO_Register_PORTC, copy_u8PinNB);
 452:	85 e3       	ldi	r24, 0x35	; 53
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	30 81       	ld	r19, Z
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
 45c:	88 2f       	mov	r24, r24
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	87 70       	andi	r24, 0x07	; 7
 462:	99 27       	eor	r25, r25
 464:	86 57       	subi	r24, 0x76	; 118
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	fc 01       	movw	r30, r24
 46a:	20 81       	ld	r18, Z
 46c:	85 e3       	ldi	r24, 0x35	; 53
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	23 2b       	or	r18, r19
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
 476:	19 c0       	rjmp	.+50     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
				else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	88 31       	cpi	r24, 0x18	; 24
 47c:	e8 f0       	brcs	.+58     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	d0 f4       	brcc	.+52     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
					DIO_Register_PORTD = SET_BIT(DIO_Register_PORTD, copy_u8PinNB);
 484:	82 e3       	ldi	r24, 0x32	; 50
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	30 81       	ld	r19, Z
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	88 2f       	mov	r24, r24
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	87 70       	andi	r24, 0x07	; 7
 494:	99 27       	eor	r25, r25
 496:	86 57       	subi	r24, 0x76	; 118
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	fc 01       	movw	r30, r24
 49c:	20 81       	ld	r18, Z
 49e:	82 e3       	ldi	r24, 0x32	; 50
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	23 2b       	or	r18, r19
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
				break;
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>

			default:
				local_u8Error = STD_ERROR_NOK;
 4ac:	19 82       	std	Y+1, r1	; 0x01
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
		}

	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 4b0:	19 82       	std	Y+1, r1	; 0x01
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
				break;
 4b4:	00 00       	nop
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__FUSE_REGION_LENGTH__+0xba>
				break;
 4b8:	00 00       	nop
	}

	return local_u8Error;
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
}
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <DIO_u8ReadPinValue>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPinValue(u8 copy_u8PinNB, u8 * copy_pu8Value)
{
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <DIO_u8ReadPinValue+0x6>
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <DIO_u8ReadPinValue+0x8>
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	8a 83       	std	Y+2, r24	; 0x02
 4d6:	7c 83       	std	Y+4, r23	; 0x04
 4d8:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PinNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <DIO_u8ReadPinValue+0x1e>
 4e4:	60 c0       	rjmp	.+192    	; 0x5a6 <DIO_u8ReadPinValue+0xde>
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	9c 81       	ldd	r25, Y+4	; 0x04
 4ea:	89 2b       	or	r24, r25
 4ec:	09 f4       	brne	.+2      	; 0x4f0 <DIO_u8ReadPinValue+0x28>
 4ee:	5b c0       	rjmp	.+182    	; 0x5a6 <DIO_u8ReadPinValue+0xde>
	{
		if((copy_u8PinNB >= DIO_PIN0) && (copy_u8PinNB <= DIO_PIN7))
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	88 30       	cpi	r24, 0x08	; 8
 4f4:	88 f4       	brcc	.+34     	; 0x518 <DIO_u8ReadPinValue+0x50>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINA, copy_u8PinNB);
 4f6:	89 e3       	ldi	r24, 0x39	; 57
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 81       	ld	r18, Z
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	86 57       	subi	r24, 0x76	; 118
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	28 23       	and	r18, r24
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	9c 81       	ldd	r25, Y+4	; 0x04
 512:	fc 01       	movw	r30, r24
 514:	20 83       	st	Z, r18
 516:	44 c0       	rjmp	.+136    	; 0x5a0 <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN8) && (copy_u8PinNB <= DIO_PIN15))
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	88 30       	cpi	r24, 0x08	; 8
 51c:	a0 f0       	brcs	.+40     	; 0x546 <DIO_u8ReadPinValue+0x7e>
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	80 31       	cpi	r24, 0x10	; 16
 522:	88 f4       	brcc	.+34     	; 0x546 <DIO_u8ReadPinValue+0x7e>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINB, copy_u8PinNB);
 524:	86 e3       	ldi	r24, 0x36	; 54
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	fc 01       	movw	r30, r24
 52a:	20 81       	ld	r18, Z
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	86 57       	subi	r24, 0x76	; 118
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	28 23       	and	r18, r24
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	9c 81       	ldd	r25, Y+4	; 0x04
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
 544:	2d c0       	rjmp	.+90     	; 0x5a0 <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN16) && (copy_u8PinNB <= DIO_PIN23))
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	80 31       	cpi	r24, 0x10	; 16
 54a:	a0 f0       	brcs	.+40     	; 0x574 <DIO_u8ReadPinValue+0xac>
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	88 31       	cpi	r24, 0x18	; 24
 550:	88 f4       	brcc	.+34     	; 0x574 <DIO_u8ReadPinValue+0xac>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PINC, copy_u8PinNB);
 552:	83 e3       	ldi	r24, 0x33	; 51
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	20 81       	ld	r18, Z
 55a:	8a 81       	ldd	r24, Y+2	; 0x02
 55c:	88 2f       	mov	r24, r24
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	86 57       	subi	r24, 0x76	; 118
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	fc 01       	movw	r30, r24
 566:	80 81       	ld	r24, Z
 568:	28 23       	and	r18, r24
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	9c 81       	ldd	r25, Y+4	; 0x04
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
 572:	16 c0       	rjmp	.+44     	; 0x5a0 <DIO_u8ReadPinValue+0xd8>
		}
		else if((copy_u8PinNB >= DIO_PIN24) && (copy_u8PinNB <= DIO_PIN31))
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	88 31       	cpi	r24, 0x18	; 24
 578:	98 f0       	brcs	.+38     	; 0x5a0 <DIO_u8ReadPinValue+0xd8>
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	80 32       	cpi	r24, 0x20	; 32
 57e:	80 f4       	brcc	.+32     	; 0x5a0 <DIO_u8ReadPinValue+0xd8>
		{
			* copy_pu8Value = GET_BIT(DIO_Register_PIND, copy_u8PinNB);
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	fc 01       	movw	r30, r24
 586:	20 81       	ld	r18, Z
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	88 2f       	mov	r24, r24
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	86 57       	subi	r24, 0x76	; 118
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	fc 01       	movw	r30, r24
 594:	80 81       	ld	r24, Z
 596:	28 23       	and	r18, r24
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	9c 81       	ldd	r25, Y+4	; 0x04
 59c:	fc 01       	movw	r30, r24
 59e:	20 83       	st	Z, r18
		}
		local_u8Error = STD_ERROR_OK;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <DIO_u8ReadPinValue+0xe0>
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 5a6:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <DIO_u8SetPortDirection>:
/*          -> Location (copy_u8Value)                        						*/
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortDirection(u8 copy_u8PortNB, u8 copy_u8Direction)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	00 d0       	rcall	.+0      	; 0x5be <DIO_u8SetPortDirection+0x6>
 5be:	0f 92       	push	r0
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
 5c4:	8a 83       	std	Y+2, r24	; 0x02
 5c6:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8PortNB < DIO_MAXPORTNB)
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <DIO_u8SetPortDirection+0x1c>
 5d2:	57 c0       	rjmp	.+174    	; 0x682 <DIO_u8SetPortDirection+0xca>
	{
		switch(copy_u8Direction)
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	21 f0       	breq	.+8      	; 0x5e6 <DIO_u8SetPortDirection+0x2e>
 5de:	8f 3f       	cpi	r24, 0xFF	; 255
 5e0:	91 05       	cpc	r25, r1
 5e2:	09 f1       	breq	.+66     	; 0x626 <DIO_u8SetPortDirection+0x6e>
 5e4:	4b c0       	rjmp	.+150    	; 0x67c <DIO_u8SetPortDirection+0xc4>
		{
			case DIO_PORT_INPUT:
				if(copy_u8PortNB == DIO_PORTA)
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	88 23       	and	r24, r24
 5ea:	29 f4       	brne	.+10     	; 0x5f6 <DIO_u8SetPortDirection+0x3e>
				{
					DIO_Register_DDRA = RESET_PORT(DIO_Register_DDRA);
 5ec:	8a e3       	ldi	r24, 0x3A	; 58
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	fc 01       	movw	r30, r24
 5f2:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
				}
				break;
 5f4:	48 c0       	rjmp	.+144    	; 0x686 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTB)
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	29 f4       	brne	.+10     	; 0x606 <DIO_u8SetPortDirection+0x4e>
					DIO_Register_DDRB = RESET_PORT(DIO_Register_DDRB);
 5fc:	87 e3       	ldi	r24, 0x37	; 55
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	fc 01       	movw	r30, r24
 602:	10 82       	st	Z, r1
				break;
 604:	40 c0       	rjmp	.+128    	; 0x686 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTC)
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	29 f4       	brne	.+10     	; 0x616 <DIO_u8SetPortDirection+0x5e>
					DIO_Register_DDRC = RESET_PORT(DIO_Register_DDRC);
 60c:	84 e3       	ldi	r24, 0x34	; 52
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	fc 01       	movw	r30, r24
 612:	10 82       	st	Z, r1
				break;
 614:	38 c0       	rjmp	.+112    	; 0x686 <DIO_u8SetPortDirection+0xce>
				else if(copy_u8PortNB == DIO_PORTD)
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	83 30       	cpi	r24, 0x03	; 3
 61a:	a9 f5       	brne	.+106    	; 0x686 <DIO_u8SetPortDirection+0xce>
					DIO_Register_DDRD = RESET_PORT(DIO_Register_DDRD);
 61c:	81 e3       	ldi	r24, 0x31	; 49
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fc 01       	movw	r30, r24
 622:	10 82       	st	Z, r1
				break;
 624:	30 c0       	rjmp	.+96     	; 0x686 <DIO_u8SetPortDirection+0xce>

			case DIO_PORT_OUTPUT:
				switch (copy_u8PortNB)
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	91 05       	cpc	r25, r1
 630:	91 f0       	breq	.+36     	; 0x656 <DIO_u8SetPortDirection+0x9e>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	91 05       	cpc	r25, r1
 636:	1c f4       	brge	.+6      	; 0x63e <DIO_u8SetPortDirection+0x86>
 638:	89 2b       	or	r24, r25
 63a:	39 f0       	breq	.+14     	; 0x64a <DIO_u8SetPortDirection+0x92>
					break;
				case DIO_PORTD:
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
					break;
				}
				break;
 63c:	25 c0       	rjmp	.+74     	; 0x688 <DIO_u8SetPortDirection+0xd0>
 63e:	82 30       	cpi	r24, 0x02	; 2
 640:	91 05       	cpc	r25, r1
 642:	79 f0       	breq	.+30     	; 0x662 <DIO_u8SetPortDirection+0xaa>
 644:	03 97       	sbiw	r24, 0x03	; 3
 646:	99 f0       	breq	.+38     	; 0x66e <DIO_u8SetPortDirection+0xb6>
 648:	1f c0       	rjmp	.+62     	; 0x688 <DIO_u8SetPortDirection+0xd0>
					DIO_Register_DDRA = SET_PORT(DIO_Register_DDRA);
 64a:	8a e3       	ldi	r24, 0x3A	; 58
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	2f ef       	ldi	r18, 0xFF	; 255
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
					break;
 654:	12 c0       	rjmp	.+36     	; 0x67a <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRB = SET_PORT(DIO_Register_DDRB);
 656:	87 e3       	ldi	r24, 0x37	; 55
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	2f ef       	ldi	r18, 0xFF	; 255
 65c:	fc 01       	movw	r30, r24
 65e:	20 83       	st	Z, r18
					break;
 660:	0c c0       	rjmp	.+24     	; 0x67a <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRC = SET_PORT(DIO_Register_DDRC);
 662:	84 e3       	ldi	r24, 0x34	; 52
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	2f ef       	ldi	r18, 0xFF	; 255
 668:	fc 01       	movw	r30, r24
 66a:	20 83       	st	Z, r18
					break;
 66c:	06 c0       	rjmp	.+12     	; 0x67a <DIO_u8SetPortDirection+0xc2>
					DIO_Register_DDRD = SET_PORT(DIO_Register_DDRD);
 66e:	81 e3       	ldi	r24, 0x31	; 49
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	2f ef       	ldi	r18, 0xFF	; 255
 674:	fc 01       	movw	r30, r24
 676:	20 83       	st	Z, r18
					break;
 678:	00 00       	nop
				break;
 67a:	06 c0       	rjmp	.+12     	; 0x688 <DIO_u8SetPortDirection+0xd0>
			default:
				local_u8Error = STD_ERROR_NOK;
 67c:	19 82       	std	Y+1, r1	; 0x01
				break;
 67e:	00 00       	nop
 680:	03 c0       	rjmp	.+6      	; 0x688 <DIO_u8SetPortDirection+0xd0>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 682:	19 82       	std	Y+1, r1	; 0x01
 684:	01 c0       	rjmp	.+2      	; 0x688 <DIO_u8SetPortDirection+0xd0>
				break;
 686:	00 00       	nop
	}

	return local_u8Error;
 688:	89 81       	ldd	r24, Y+1	; 0x01
}
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <DIO_u8SetPortValue>:
/*          -> Value (copy_u8Value) (from 0x00 till 0xFF)                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8SetPortValue(u8 copy_u8PortNB, u8 copy_pu8Value)
{
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	00 d0       	rcall	.+0      	; 0x69c <DIO_u8SetPortValue+0x6>
 69c:	0f 92       	push	r0
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	8a 83       	std	Y+2, r24	; 0x02
 6a4:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	89 83       	std	Y+1, r24	; 0x01

	if( copy_u8PortNB < DIO_MAXPORTNB )
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	84 30       	cpi	r24, 0x04	; 4
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <DIO_u8SetPortValue+0x1c>
 6b0:	7c c0       	rjmp	.+248    	; 0x7aa <DIO_u8SetPortValue+0x114>
	{
		switch(copy_pu8Value)
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	88 2f       	mov	r24, r24
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	8f 3f       	cpi	r24, 0xFF	; 255
 6ba:	91 05       	cpc	r25, r1
 6bc:	3c f4       	brge	.+14     	; 0x6cc <DIO_u8SetPortValue+0x36>
 6be:	18 16       	cp	r1, r24
 6c0:	19 06       	cpc	r1, r25
 6c2:	0c f4       	brge	.+2      	; 0x6c6 <DIO_u8SetPortValue+0x30>
 6c4:	4c c0       	rjmp	.+152    	; 0x75e <DIO_u8SetPortValue+0xc8>
 6c6:	89 2b       	or	r24, r25
 6c8:	29 f0       	breq	.+10     	; 0x6d4 <DIO_u8SetPortValue+0x3e>
 6ca:	6d c0       	rjmp	.+218    	; 0x7a6 <DIO_u8SetPortValue+0x110>
 6cc:	8f 3f       	cpi	r24, 0xFF	; 255
 6ce:	91 05       	cpc	r25, r1
 6d0:	11 f1       	breq	.+68     	; 0x716 <DIO_u8SetPortValue+0x80>
 6d2:	69 c0       	rjmp	.+210    	; 0x7a6 <DIO_u8SetPortValue+0x110>
		{
			case DIO_PORT_LOW:
				if(copy_u8PortNB == DIO_PORTA)
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	88 23       	and	r24, r24
 6d8:	29 f4       	brne	.+10     	; 0x6e4 <DIO_u8SetPortValue+0x4e>
				{
					DIO_Register_PORTA = RESET_PORT(DIO_Register_PORTA);
 6da:	8b e3       	ldi	r24, 0x3B	; 59
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	fc 01       	movw	r30, r24
 6e0:	10 82       	st	Z, r1
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
				}
				break;
 6e2:	65 c0       	rjmp	.+202    	; 0x7ae <DIO_u8SetPortValue+0x118>
				else if(copy_u8PortNB == DIO_PORTB)
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <DIO_u8SetPortValue+0x5e>
					DIO_Register_PORTB = RESET_PORT(DIO_Register_PORTB);
 6ea:	88 e3       	ldi	r24, 0x38	; 56
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	fc 01       	movw	r30, r24
 6f0:	10 82       	st	Z, r1
				break;
 6f2:	5d c0       	rjmp	.+186    	; 0x7ae <DIO_u8SetPortValue+0x118>
				else if(copy_u8PortNB == DIO_PORTC)
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	29 f4       	brne	.+10     	; 0x704 <DIO_u8SetPortValue+0x6e>
					DIO_Register_PORTC = RESET_PORT(DIO_Register_PORTC);
 6fa:	85 e3       	ldi	r24, 0x35	; 53
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	fc 01       	movw	r30, r24
 700:	10 82       	st	Z, r1
				break;
 702:	55 c0       	rjmp	.+170    	; 0x7ae <DIO_u8SetPortValue+0x118>
				else if(copy_u8PortNB == DIO_PORTD)
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	83 30       	cpi	r24, 0x03	; 3
 708:	09 f0       	breq	.+2      	; 0x70c <DIO_u8SetPortValue+0x76>
 70a:	51 c0       	rjmp	.+162    	; 0x7ae <DIO_u8SetPortValue+0x118>
					DIO_Register_PORTD = RESET_PORT(DIO_Register_PORTD);
 70c:	82 e3       	ldi	r24, 0x32	; 50
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	fc 01       	movw	r30, r24
 712:	10 82       	st	Z, r1
				break;
 714:	4c c0       	rjmp	.+152    	; 0x7ae <DIO_u8SetPortValue+0x118>

			case DIO_PORT_OUTPUT:
				if(copy_u8PortNB == DIO_PORTA)
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	88 23       	and	r24, r24
 71a:	31 f4       	brne	.+12     	; 0x728 <DIO_u8SetPortValue+0x92>
				{
					DIO_Register_PORTA = SET_PORT(DIO_Register_PORTA);
 71c:	8b e3       	ldi	r24, 0x3B	; 59
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
				}
				break;
 726:	45 c0       	rjmp	.+138    	; 0x7b2 <DIO_u8SetPortValue+0x11c>
				else if(copy_u8PortNB == DIO_PORTB)
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	31 f4       	brne	.+12     	; 0x73a <DIO_u8SetPortValue+0xa4>
					DIO_Register_PORTB = SET_PORT(DIO_Register_PORTB);
 72e:	88 e3       	ldi	r24, 0x38	; 56
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	2f ef       	ldi	r18, 0xFF	; 255
 734:	fc 01       	movw	r30, r24
 736:	20 83       	st	Z, r18
				break;
 738:	3c c0       	rjmp	.+120    	; 0x7b2 <DIO_u8SetPortValue+0x11c>
				else if(copy_u8PortNB == DIO_PORTC)
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	82 30       	cpi	r24, 0x02	; 2
 73e:	31 f4       	brne	.+12     	; 0x74c <DIO_u8SetPortValue+0xb6>
					DIO_Register_PORTC = SET_PORT(DIO_Register_PORTC);
 740:	85 e3       	ldi	r24, 0x35	; 53
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	2f ef       	ldi	r18, 0xFF	; 255
 746:	fc 01       	movw	r30, r24
 748:	20 83       	st	Z, r18
				break;
 74a:	33 c0       	rjmp	.+102    	; 0x7b2 <DIO_u8SetPortValue+0x11c>
				else if(copy_u8PortNB == DIO_PORTD)
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	83 30       	cpi	r24, 0x03	; 3
 750:	81 f5       	brne	.+96     	; 0x7b2 <DIO_u8SetPortValue+0x11c>
					DIO_Register_PORTD = SET_PORT(DIO_Register_PORTD);
 752:	82 e3       	ldi	r24, 0x32	; 50
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	2f ef       	ldi	r18, 0xFF	; 255
 758:	fc 01       	movw	r30, r24
 75a:	20 83       	st	Z, r18
				break;
 75c:	2a c0       	rjmp	.+84     	; 0x7b2 <DIO_u8SetPortValue+0x11c>

			case DIO_BYTE_VALUE_RANGE:
				if(copy_u8PortNB == DIO_PORTA)
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	88 23       	and	r24, r24
 762:	31 f4       	brne	.+12     	; 0x770 <DIO_u8SetPortValue+0xda>
				{
					DIO_Register_PORTA = ASSIGN_PORT(DIO_Register_PORTA, copy_pu8Value);
 764:	8b e3       	ldi	r24, 0x3B	; 59
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	2b 81       	ldd	r18, Y+3	; 0x03
 76a:	fc 01       	movw	r30, r24
 76c:	20 83       	st	Z, r18
				}
				else if(copy_u8PortNB == DIO_PORTD)
				{
					DIO_Register_PORTD = ASSIGN_PORT(DIO_Register_PORTD, copy_pu8Value);
				}
				break;
 76e:	23 c0       	rjmp	.+70     	; 0x7b6 <DIO_u8SetPortValue+0x120>
				else if(copy_u8PortNB == DIO_PORTB)
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	31 f4       	brne	.+12     	; 0x782 <DIO_u8SetPortValue+0xec>
					DIO_Register_PORTB = ASSIGN_PORT(DIO_Register_PORTB, copy_pu8Value);
 776:	88 e3       	ldi	r24, 0x38	; 56
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	2b 81       	ldd	r18, Y+3	; 0x03
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
				break;
 780:	1a c0       	rjmp	.+52     	; 0x7b6 <DIO_u8SetPortValue+0x120>
				else if(copy_u8PortNB == DIO_PORTC)
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	82 30       	cpi	r24, 0x02	; 2
 786:	31 f4       	brne	.+12     	; 0x794 <DIO_u8SetPortValue+0xfe>
					DIO_Register_PORTC = ASSIGN_PORT(DIO_Register_PORTC, copy_pu8Value);
 788:	85 e3       	ldi	r24, 0x35	; 53
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	2b 81       	ldd	r18, Y+3	; 0x03
 78e:	fc 01       	movw	r30, r24
 790:	20 83       	st	Z, r18
				break;
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <DIO_u8SetPortValue+0x120>
				else if(copy_u8PortNB == DIO_PORTD)
 794:	8a 81       	ldd	r24, Y+2	; 0x02
 796:	83 30       	cpi	r24, 0x03	; 3
 798:	71 f4       	brne	.+28     	; 0x7b6 <DIO_u8SetPortValue+0x120>
					DIO_Register_PORTD = ASSIGN_PORT(DIO_Register_PORTD, copy_pu8Value);
 79a:	82 e3       	ldi	r24, 0x32	; 50
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	2b 81       	ldd	r18, Y+3	; 0x03
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 83       	st	Z, r18
				break;
 7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <DIO_u8SetPortValue+0x120>
			default:
				local_u8Error = STD_ERROR_NOK;
 7a6:	19 82       	std	Y+1, r1	; 0x01
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <DIO_u8SetPortValue+0x122>
		}
	}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 7aa:	19 82       	std	Y+1, r1	; 0x01
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <DIO_u8SetPortValue+0x122>
				break;
 7ae:	00 00       	nop
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <DIO_u8SetPortValue+0x122>
				break;
 7b2:	00 00       	nop
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <DIO_u8SetPortValue+0x122>
				break;
 7b6:	00 00       	nop
	}

	return local_u8Error;
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 7ba:	0f 90       	pop	r0
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	08 95       	ret

000007c6 <DIO_u8ReadPortValue>:
/*          -> Location (* copy_pu8Value)                                           */
/* Outputs: -> Error Status (local_u8Error), Expects either OK=1, or NOK=0	     	*/
/************************************************************************************/

u8 DIO_u8ReadPortValue(u8 copy_u8PortNB, u8 * copy_pu8Value)
{
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	00 d0       	rcall	.+0      	; 0x7cc <DIO_u8ReadPortValue+0x6>
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <DIO_u8ReadPortValue+0x8>
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	8a 83       	std	Y+2, r24	; 0x02
 7d4:	7c 83       	std	Y+4, r23	; 0x04
 7d6:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variables*/
	u8 local_u8Error = STD_ERROR_OK;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	89 83       	std	Y+1, r24	; 0x01

	if((copy_u8PortNB < DIO_MAXPINNB) && (copy_pu8Value != NULL))
 7dc:	8a 81       	ldd	r24, Y+2	; 0x02
 7de:	80 32       	cpi	r24, 0x20	; 32
 7e0:	b0 f5       	brcc	.+108    	; 0x84e <DIO_u8ReadPortValue+0x88>
 7e2:	8b 81       	ldd	r24, Y+3	; 0x03
 7e4:	9c 81       	ldd	r25, Y+4	; 0x04
 7e6:	89 2b       	or	r24, r25
 7e8:	91 f1       	breq	.+100    	; 0x84e <DIO_u8ReadPortValue+0x88>
		{
			if(copy_u8PortNB == DIO_PORTA)
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	88 23       	and	r24, r24
 7ee:	49 f4       	brne	.+18     	; 0x802 <DIO_u8ReadPortValue+0x3c>
			{
				GET_PORT(DIO_Register_PINA, * copy_pu8Value);
 7f0:	89 e3       	ldi	r24, 0x39	; 57
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	fc 01       	movw	r30, r24
 7f6:	20 81       	ld	r18, Z
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	9c 81       	ldd	r25, Y+4	; 0x04
 7fc:	fc 01       	movw	r30, r24
 7fe:	20 83       	st	Z, r18
 800:	23 c0       	rjmp	.+70     	; 0x848 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTB)
 802:	8a 81       	ldd	r24, Y+2	; 0x02
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	49 f4       	brne	.+18     	; 0x81a <DIO_u8ReadPortValue+0x54>
			{
				GET_PORT(DIO_Register_PINB, * copy_pu8Value);
 808:	86 e3       	ldi	r24, 0x36	; 54
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	fc 01       	movw	r30, r24
 80e:	20 81       	ld	r18, Z
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	9c 81       	ldd	r25, Y+4	; 0x04
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
 818:	17 c0       	rjmp	.+46     	; 0x848 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTC)
 81a:	8a 81       	ldd	r24, Y+2	; 0x02
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	49 f4       	brne	.+18     	; 0x832 <DIO_u8ReadPortValue+0x6c>
			{
				GET_PORT(DIO_Register_PINC, * copy_pu8Value);
 820:	83 e3       	ldi	r24, 0x33	; 51
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	fc 01       	movw	r30, r24
 826:	20 81       	ld	r18, Z
 828:	8b 81       	ldd	r24, Y+3	; 0x03
 82a:	9c 81       	ldd	r25, Y+4	; 0x04
 82c:	fc 01       	movw	r30, r24
 82e:	20 83       	st	Z, r18
 830:	0b c0       	rjmp	.+22     	; 0x848 <DIO_u8ReadPortValue+0x82>
			}
			else if(copy_u8PortNB == DIO_PORTA)
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	88 23       	and	r24, r24
 836:	41 f4       	brne	.+16     	; 0x848 <DIO_u8ReadPortValue+0x82>
			{
				GET_PORT(DIO_Register_PIND, * copy_pu8Value);
 838:	80 e3       	ldi	r24, 0x30	; 48
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	fc 01       	movw	r30, r24
 83e:	20 81       	ld	r18, Z
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	9c 81       	ldd	r25, Y+4	; 0x04
 844:	fc 01       	movw	r30, r24
 846:	20 83       	st	Z, r18
			}
			local_u8Error = STD_ERROR_OK;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	89 83       	std	Y+1, r24	; 0x01
 84c:	01 c0       	rjmp	.+2      	; 0x850 <DIO_u8ReadPortValue+0x8a>
		}
	else
	{
		local_u8Error = STD_ERROR_NOK;
 84e:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8Error;
 850:	89 81       	ldd	r24, Y+1	; 0x01
}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <LEDMAT_SetPattern>:
/*				   will be saved inside a pointer to u8 type.						*/
/*  Example	  	-> ErrorStatus = LEDMAT_SetPattern(myArray, LEDMAT_RED);			*/
/************************************************************************************/

u8 LEDMAT_SetPattern (u8 * copy_Au8Pattern, u8 copy_u8Color)
{
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	00 d0       	rcall	.+0      	; 0x866 <LEDMAT_SetPattern+0x6>
 866:	00 d0       	rcall	.+0      	; 0x868 <LEDMAT_SetPattern+0x8>
 868:	0f 92       	push	r0
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	9c 83       	std	Y+4, r25	; 0x04
 870:	8b 83       	std	Y+3, r24	; 0x03
 872:	6d 83       	std	Y+5, r22	; 0x05
	/* Local Variables definitions and initializations								*/

	u8 local_u8ErrorState = STD_ERROR_OK;		/* Error status variable			*/
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	89 83       	std	Y+1, r24	; 0x01
	u8 local_u8LoopCounter = NULL;				/* Loop counter variable			*/
 878:	1a 82       	std	Y+2, r1	; 0x02

	/* Validating inputs, whether the user entered the appropriate colors			*/

	if ((copy_u8Color != LEDMAT_GREEN) && (copy_u8Color != LEDMAT_RED))
 87a:	8d 81       	ldd	r24, Y+5	; 0x05
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	29 f0       	breq	.+10     	; 0x88a <LEDMAT_SetPattern+0x2a>
 880:	8d 81       	ldd	r24, Y+5	; 0x05
 882:	88 23       	and	r24, r24
 884:	11 f0       	breq	.+4      	; 0x88a <LEDMAT_SetPattern+0x2a>
	{
		local_u8ErrorState = STD_ERROR_NOK;
 886:	19 82       	std	Y+1, r1	; 0x01
 888:	6e c0       	rjmp	.+220    	; 0x966 <LEDMAT_SetPattern+0x106>

		/* Check whether the LED Matrix is either active high or active low			*/

		if(LEDMAT_TYPE == LEDMAT_ACTIVE_LOW)
		{
			switch (copy_u8Color)
 88a:	8d 81       	ldd	r24, Y+5	; 0x05
 88c:	88 2f       	mov	r24, r24
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	00 97       	sbiw	r24, 0x00	; 0
 892:	19 f0       	breq	.+6      	; 0x89a <LEDMAT_SetPattern+0x3a>
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	a1 f1       	breq	.+104    	; 0x900 <LEDMAT_SetPattern+0xa0>
 898:	66 c0       	rjmp	.+204    	; 0x966 <LEDMAT_SetPattern+0x106>
			{
			case LEDMAT_COLOR_ONE:
			/* Turn off the second color values, so it doesn't disturb the pattern */
				DIO_u8SetPortValue(LEDMAT_COLOR_TWO, STD_LOW);
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_u8SetPortValue>
			/* Writing the pattern of LEDs through looping 						   */
				for(local_u8LoopCounter = 0; local_u8LoopCounter < LEDMAT_SizeOfPattern; local_u8LoopCounter++)
 8a2:	1a 82       	std	Y+2, r1	; 0x02
 8a4:	29 c0       	rjmp	.+82     	; 0x8f8 <LEDMAT_SetPattern+0x98>
				{
			/* Intialize value of Active pins on LED Matrix (Active low)   		   */
					DIO_u8SetPortValue(LEDMAT_COMMON_PORT, LEDMAT_InitialGndValue_Low);
 8a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <LEDMAT_InitialGndValue_Low>
 8aa:	68 2f       	mov	r22, r24
 8ac:	83 e0       	ldi	r24, 0x03	; 3
 8ae:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_u8SetPortValue>
			/* Draw the pattern using the color specified 						   */
					DIO_u8SetPortValue(LEDMAT_COLOR_ONE_PORT, *(copy_Au8Pattern + local_u8LoopCounter));
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	88 2f       	mov	r24, r24
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	2b 81       	ldd	r18, Y+3	; 0x03
 8ba:	3c 81       	ldd	r19, Y+4	; 0x04
 8bc:	82 0f       	add	r24, r18
 8be:	93 1f       	adc	r25, r19
 8c0:	fc 01       	movw	r30, r24
 8c2:	80 81       	ld	r24, Z
 8c4:	68 2f       	mov	r22, r24
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_u8SetPortValue>
			/* Shift the enable pin to move to next row/column					   */
					LEDMAT_InitialGndValue_Low = CIRCULAR_SHIFT_LEFT(LEDMAT_InitialGndValue_Low, 1);
 8cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <LEDMAT_InitialGndValue_Low>
 8d0:	88 2f       	mov	r24, r24
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	98 2f       	mov	r25, r24
 8da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <LEDMAT_InitialGndValue_Low>
 8de:	88 1f       	adc	r24, r24
 8e0:	88 27       	eor	r24, r24
 8e2:	88 1f       	adc	r24, r24
 8e4:	89 2b       	or	r24, r25
 8e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <LEDMAT_InitialGndValue_Low>
			/* Wait on it for 2 milli seconds									   */
					Lib_vDelayMs(2);
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 bc 04 	call	0x978	; 0x978 <Lib_vDelayMs>
				for(local_u8LoopCounter = 0; local_u8LoopCounter < LEDMAT_SizeOfPattern; local_u8LoopCounter++)
 8f2:	8a 81       	ldd	r24, Y+2	; 0x02
 8f4:	8f 5f       	subi	r24, 0xFF	; 255
 8f6:	8a 83       	std	Y+2, r24	; 0x02
 8f8:	8a 81       	ldd	r24, Y+2	; 0x02
 8fa:	88 30       	cpi	r24, 0x08	; 8
 8fc:	a0 f2       	brcs	.-88     	; 0x8a6 <LEDMAT_SetPattern+0x46>
				}
				break;
 8fe:	33 c0       	rjmp	.+102    	; 0x966 <LEDMAT_SetPattern+0x106>
			case LEDMAT_COLOR_TWO:
				DIO_u8SetPortValue(LEDMAT_COLOR_ONE, STD_LOW);
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_u8SetPortValue>
				for(local_u8LoopCounter = 0; local_u8LoopCounter < LEDMAT_SizeOfPattern; local_u8LoopCounter++)
 908:	1a 82       	std	Y+2, r1	; 0x02
 90a:	29 c0       	rjmp	.+82     	; 0x95e <LEDMAT_SetPattern+0xfe>
				{
					DIO_u8SetPortValue(LEDMAT_COMMON_PORT, LEDMAT_InitialGndValue_Low);
 90c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <LEDMAT_InitialGndValue_Low>
 910:	68 2f       	mov	r22, r24
 912:	83 e0       	ldi	r24, 0x03	; 3
 914:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_u8SetPortValue>
					DIO_u8SetPortValue(LEDMAT_COLOR_TWO_PORT, *(copy_Au8Pattern + local_u8LoopCounter));
 918:	8a 81       	ldd	r24, Y+2	; 0x02
 91a:	88 2f       	mov	r24, r24
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	2b 81       	ldd	r18, Y+3	; 0x03
 920:	3c 81       	ldd	r19, Y+4	; 0x04
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	fc 01       	movw	r30, r24
 928:	80 81       	ld	r24, Z
 92a:	68 2f       	mov	r22, r24
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_u8SetPortValue>
					LEDMAT_InitialGndValue_Low = CIRCULAR_SHIFT_LEFT(LEDMAT_InitialGndValue_Low, 1);
 932:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <LEDMAT_InitialGndValue_Low>
 936:	88 2f       	mov	r24, r24
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	98 2f       	mov	r25, r24
 940:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <LEDMAT_InitialGndValue_Low>
 944:	88 1f       	adc	r24, r24
 946:	88 27       	eor	r24, r24
 948:	88 1f       	adc	r24, r24
 94a:	89 2b       	or	r24, r25
 94c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <LEDMAT_InitialGndValue_Low>
					Lib_vDelayMs(2);
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 bc 04 	call	0x978	; 0x978 <Lib_vDelayMs>
				for(local_u8LoopCounter = 0; local_u8LoopCounter < LEDMAT_SizeOfPattern; local_u8LoopCounter++)
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	8f 5f       	subi	r24, 0xFF	; 255
 95c:	8a 83       	std	Y+2, r24	; 0x02
 95e:	8a 81       	ldd	r24, Y+2	; 0x02
 960:	88 30       	cpi	r24, 0x08	; 8
 962:	a0 f2       	brcs	.-88     	; 0x90c <LEDMAT_SetPattern+0xac>
				}
				break;
 964:	00 00       	nop
				break;
			}
		}
	}

	return local_u8ErrorState;
 966:	89 81       	ldd	r24, Y+1	; 0x01
}
 968:	0f 90       	pop	r0
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	0f 90       	pop	r0
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	08 95       	ret

00000978 <Lib_vDelayMs>:
/*  input 		-> Time value of delay -> copy_u16time              */
/*  output		-> N/A											    */
/********************************************************************/

void Lib_vDelayMs(u16 copy_u16time)
{
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	cd b7       	in	r28, 0x3d	; 61
 97e:	de b7       	in	r29, 0x3e	; 62
 980:	2a 97       	sbiw	r28, 0x0a	; 10
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	9a 87       	std	Y+10, r25	; 0x0a
 98e:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_CountNumber;
	/*--------------------------------------------------------------*/

	/*----------------------main implementation---------------------*/

	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 990:	1d 82       	std	Y+5, r1	; 0x05
 992:	1e 82       	std	Y+6, r1	; 0x06
 994:	1f 82       	std	Y+7, r1	; 0x07
 996:	18 86       	std	Y+8, r1	; 0x08
 998:	28 c0       	rjmp	.+80     	; 0x9ea <Lib_vDelayMs+0x72>
		/*----------------------------------------------------------*/
		/* outer loop which runs multiple of 1ms					*/
		/* -> lower limit: 0										*/
		/* -> upper limit: copy_u16time 						    */
		/*----------------------------------------------------------*/
		for(Local_InsideLoopCounter = NULL; Local_InsideLoopCounter < LIB_U8_UPPER_THRESHOLD ; Local_InsideLoopCounter++)
 99a:	19 82       	std	Y+1, r1	; 0x01
 99c:	1a 82       	std	Y+2, r1	; 0x02
 99e:	1b 82       	std	Y+3, r1	; 0x03
 9a0:	1c 82       	std	Y+4, r1	; 0x04
 9a2:	0f c0       	rjmp	.+30     	; 0x9c2 <Lib_vDelayMs+0x4a>
	...
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	9a 81       	ldd	r25, Y+2	; 0x02
 9b0:	ab 81       	ldd	r26, Y+3	; 0x03
 9b2:	bc 81       	ldd	r27, Y+4	; 0x04
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	a1 1d       	adc	r26, r1
 9b8:	b1 1d       	adc	r27, r1
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	9a 83       	std	Y+2, r25	; 0x02
 9be:	ab 83       	std	Y+3, r26	; 0x03
 9c0:	bc 83       	std	Y+4, r27	; 0x04
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	9a 81       	ldd	r25, Y+2	; 0x02
 9c6:	ab 81       	ldd	r26, Y+3	; 0x03
 9c8:	bc 81       	ldd	r27, Y+4	; 0x04
 9ca:	80 3d       	cpi	r24, 0xD0	; 208
 9cc:	91 05       	cpc	r25, r1
 9ce:	a1 05       	cpc	r26, r1
 9d0:	b1 05       	cpc	r27, r1
 9d2:	40 f3       	brcs	.-48     	; 0x9a4 <Lib_vDelayMs+0x2c>
	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
 9d4:	8d 81       	ldd	r24, Y+5	; 0x05
 9d6:	9e 81       	ldd	r25, Y+6	; 0x06
 9d8:	af 81       	ldd	r26, Y+7	; 0x07
 9da:	b8 85       	ldd	r27, Y+8	; 0x08
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	a1 1d       	adc	r26, r1
 9e0:	b1 1d       	adc	r27, r1
 9e2:	8d 83       	std	Y+5, r24	; 0x05
 9e4:	9e 83       	std	Y+6, r25	; 0x06
 9e6:	af 83       	std	Y+7, r26	; 0x07
 9e8:	b8 87       	std	Y+8, r27	; 0x08
 9ea:	89 85       	ldd	r24, Y+9	; 0x09
 9ec:	9a 85       	ldd	r25, Y+10	; 0x0a
 9ee:	cc 01       	movw	r24, r24
 9f0:	a0 e0       	ldi	r26, 0x00	; 0
 9f2:	b0 e0       	ldi	r27, 0x00	; 0
 9f4:	2d 81       	ldd	r18, Y+5	; 0x05
 9f6:	3e 81       	ldd	r19, Y+6	; 0x06
 9f8:	4f 81       	ldd	r20, Y+7	; 0x07
 9fa:	58 85       	ldd	r21, Y+8	; 0x08
 9fc:	28 17       	cp	r18, r24
 9fe:	39 07       	cpc	r19, r25
 a00:	4a 07       	cpc	r20, r26
 a02:	5b 07       	cpc	r21, r27
 a04:	50 f2       	brcs	.-108    	; 0x99a <Lib_vDelayMs+0x22>
			asm("nop");
			asm("nop");
		}
	}

}
 a06:	00 00       	nop
 a08:	2a 96       	adiw	r28, 0x0a	; 10
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	f8 94       	cli
 a0e:	de bf       	out	0x3e, r29	; 62
 a10:	0f be       	out	0x3f, r0	; 63
 a12:	cd bf       	out	0x3d, r28	; 61
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	08 95       	ret

00000a1a <Lib_vDelayUs>:
/*				 the given input value of time in microseconds  */
/*  input 		-> Time value of delay                          */
/*  output		-> N/A											*/
/****************************************************************/
void Lib_vDelayUs(u16 copy_u16time)
{
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	00 d0       	rcall	.+0      	; 0xa20 <Lib_vDelayUs+0x6>
 a20:	00 d0       	rcall	.+0      	; 0xa22 <Lib_vDelayUs+0x8>
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
 a26:	9c 83       	std	Y+4, r25	; 0x04
 a28:	8b 83       	std	Y+3, r24	; 0x03
	/* this formula is used to calculate T1, T2, T3, then       */
	/* then calculate the number of iterations needed to 		*/
	/* generate the required delay in microseconds              */
	/*----------------------------------------------------------*/

	u16 local_CountNumber = (copy_u16time - LIB_U8_TOTAL_CALCULATED) / LIB_U8_AVG_TIME_PER_ITERATION;
 a2a:	8b 81       	ldd	r24, Y+3	; 0x03
 a2c:	9c 81       	ldd	r25, Y+4	; 0x04
 a2e:	45 97       	sbiw	r24, 0x15	; 21
 a30:	9c 01       	movw	r18, r24
 a32:	a9 e8       	ldi	r26, 0x89	; 137
 a34:	b8 e8       	ldi	r27, 0x88	; 136
 a36:	0e 94 72 05 	call	0xae4	; 0xae4 <__umulhisi3>
 a3a:	96 95       	lsr	r25
 a3c:	87 95       	ror	r24
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	9a 83       	std	Y+2, r25	; 0x02
 a48:	89 83       	std	Y+1, r24	; 0x01

	for(;local_CountNumber > NULL; local_CountNumber--)
 a4a:	06 c0       	rjmp	.+12     	; 0xa58 <Lib_vDelayUs+0x3e>
	{
			asm("nop");
 a4c:	00 00       	nop
	for(;local_CountNumber > NULL; local_CountNumber--)
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	9a 81       	ldd	r25, Y+2	; 0x02
 a52:	01 97       	sbiw	r24, 0x01	; 1
 a54:	9a 83       	std	Y+2, r25	; 0x02
 a56:	89 83       	std	Y+1, r24	; 0x01
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	9a 81       	ldd	r25, Y+2	; 0x02
 a5c:	89 2b       	or	r24, r25
 a5e:	b1 f7       	brne	.-20     	; 0xa4c <Lib_vDelayUs+0x32>
	}
}
 a60:	00 00       	nop
 a62:	0f 90       	pop	r0
 a64:	0f 90       	pop	r0
 a66:	0f 90       	pop	r0
 a68:	0f 90       	pop	r0
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret

00000a70 <main>:


#include "LEDMAT_Interface.h"

void main (void)
{
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
 a78:	ab 97       	sbiw	r28, 0x2b	; 43
 a7a:	0f b6       	in	r0, 0x3f	; 63
 a7c:	f8 94       	cli
 a7e:	de bf       	out	0x3e, r29	; 62
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	cd bf       	out	0x3d, r28	; 61
	DIO_vInit();
 a84:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vInit>
	u8 local_myPattern[5][8]=
 a88:	88 e2       	ldi	r24, 0x28	; 40
 a8a:	e2 e6       	ldi	r30, 0x62	; 98
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	de 01       	movw	r26, r28
 a90:	14 96       	adiw	r26, 0x04	; 4
 a92:	01 90       	ld	r0, Z+
 a94:	0d 92       	st	X+, r0
 a96:	8a 95       	dec	r24
 a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x22>
			{0, 0, 0b01100000, 0b10011111, 0b10011110, 0b01101011, 0b00011001, 0b00011000},
			{0, 0, 0b01100000, 0b10011111, 0b10011110, 0b01101011, 0b00001101, 0b00001100},
			{0, 0, 0b01100000, 0b10011111, 0b10011110, 0b01101011, 0b00000111, 0b00000110},
	};

	u8 i= 0;
 a9a:	19 82       	std	Y+1, r1	; 0x01
	u8 j= 0;
 a9c:	1a 82       	std	Y+2, r1	; 0x02
	u8 k=0;
 a9e:	1b 82       	std	Y+3, r1	; 0x03

			while(1)
			{
				for(j=0; j < 5; j++)
 aa0:	1a 82       	std	Y+2, r1	; 0x02
 aa2:	1c c0       	rjmp	.+56     	; 0xadc <main+0x6c>
				{
						i=0;
 aa4:	19 82       	std	Y+1, r1	; 0x01
						while(i < 100)
 aa6:	14 c0       	rjmp	.+40     	; 0xad0 <main+0x60>
						{
							LEDMAT_SetPattern(local_myPattern[j],LEDMAT_GREEN);
 aa8:	8a 81       	ldd	r24, Y+2	; 0x02
 aaa:	88 2f       	mov	r24, r24
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	9e 01       	movw	r18, r28
 ab0:	2c 5f       	subi	r18, 0xFC	; 252
 ab2:	3f 4f       	sbci	r19, 0xFF	; 255
 ab4:	88 0f       	add	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	61 e0       	ldi	r22, 0x01	; 1
 ac6:	0e 94 30 04 	call	0x860	; 0x860 <LEDMAT_SetPattern>
							i++;
 aca:	89 81       	ldd	r24, Y+1	; 0x01
 acc:	8f 5f       	subi	r24, 0xFF	; 255
 ace:	89 83       	std	Y+1, r24	; 0x01
						while(i < 100)
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
 ad2:	84 36       	cpi	r24, 0x64	; 100
 ad4:	48 f3       	brcs	.-46     	; 0xaa8 <main+0x38>
				for(j=0; j < 5; j++)
 ad6:	8a 81       	ldd	r24, Y+2	; 0x02
 ad8:	8f 5f       	subi	r24, 0xFF	; 255
 ada:	8a 83       	std	Y+2, r24	; 0x02
 adc:	8a 81       	ldd	r24, Y+2	; 0x02
 ade:	85 30       	cpi	r24, 0x05	; 5
 ae0:	08 f3       	brcs	.-62     	; 0xaa4 <main+0x34>
 ae2:	de cf       	rjmp	.-68     	; 0xaa0 <main+0x30>

00000ae4 <__umulhisi3>:
 ae4:	a2 9f       	mul	r26, r18
 ae6:	b0 01       	movw	r22, r0
 ae8:	b3 9f       	mul	r27, r19
 aea:	c0 01       	movw	r24, r0
 aec:	a3 9f       	mul	r26, r19
 aee:	70 0d       	add	r23, r0
 af0:	81 1d       	adc	r24, r1
 af2:	11 24       	eor	r1, r1
 af4:	91 1d       	adc	r25, r1
 af6:	b2 9f       	mul	r27, r18
 af8:	70 0d       	add	r23, r0
 afa:	81 1d       	adc	r24, r1
 afc:	11 24       	eor	r1, r1
 afe:	91 1d       	adc	r25, r1
 b00:	08 95       	ret

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
